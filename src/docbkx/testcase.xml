<?xml version="1.0" encoding="UTF-8"?>
<chapter id="testcase">
  <title>Test cases</title>

  <para>Now let us start writing test cases! A test case in Citrus describes all steps for a certain use case in one single file.
  The Citrus test holds a sequence of test actions. Each action represents a very special purpose such as sending or receiving a message.
  Typically with message-based enterprise applications the sending and receiving of messages represent the main actions inside a test.</para>

  <para>However you will learn that Citrus is more than just a simple SOAP client for instance. Each test case can hold complex actions such
  as connecting to the database, transforming data, adding loops and conditional steps. With the default Citrus action set you can accomplish
  very complex use case integration tests. Later in this guide we will briefly discuss all available test actions and learn how to use
  various message transports within the test. For now we will concentrate on the basic test case structure.</para>

  <mediaobject>
    <imageobject role="fo">
      <imagedata align="center" width="450px" scale="100" fileref="figure_004.jpg" format="JPG" />
    </imageobject>
    
    <imageobject role="html">
      <imagedata align="center" display="block" fileref="figure_004.jpg" format="JPG" />
    </imageobject>
  </mediaobject>
    
  <para>The figure above describes a typical test action sequence in Citrus. A list of sending and receiving test actions composing a typical
  test case here. Each action references a predefined Citrus endpoint component that we are going to talk about later on.</para>

  <para>So how do we define those test cases? In general Citrus specifies test cases as Java classes. With TestNG or JUnit you can execute the
  Citrus tests within your Java runtime as you would do within unit testing. You can code the Citrus test in a single Java class doing assertions
  and using Spring's dependency injection mechanisms.</para>

  <para>If you are not familiar to writing Java code you can also write Citrus tests as XML files. Whatever test language you choose for Citrus
  the whole test case description takes place in one single file (Java or XML). This chapter will introduce the custom XML schema language as
  well as the Java domain specific language so you will be able to write Citrus test cases no matter what knowledge base you belong to.</para>

  <section id="testcase-defining">
    <title>Writing a test case</title>

    <para>Put simply, a Citrus test case is nothing but a simple Spring XML configuration file. The Spring framework has become a state of the art 
    development framework for enterprise Java applications. As you work with Citrus you will also learn how to use the Spring Ioc (Inversion of control)
    container and the concepts of dependency injection. So let us have a look at the pure Spring XML configuration syntax first. You are free to write 
    fully compatible test cases for the Citrus framework just using this syntax.</para>
    
    <para><emphasis>Spring bean definition syntax</emphasis></para>
    <programlisting>&lt;beans
    xmlns=&quot;http://www.springframework.org/schema/beans&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd&quot;&gt;
    
    &lt;bean name=&quot;MyFirstTest&quot; 
             class=&quot;com.consol.citrus.TestCase&quot;&gt;
        &lt;property name=&quot;variableDefinitions&quot;&gt;
            <lineannotation>&lt;!-- variables of this test go here --&gt;</lineannotation>
        &lt;/property&gt;     
        &lt;property name=&quot;actions&quot;&gt;
            <lineannotation>&lt;!-- actions of this test go here --&gt;</lineannotation>
        &lt;/property&gt;
    &lt;/bean&gt;
&lt;/beans&gt;</programlisting>
    
    <para>Citrus can execute these Spring bean definitions as normal test cases - no problem, but the pure Spring XML
    syntax is very verbose and probably not the best way to describe a test case in Citrus. In particular you have to know a lot of Citrus internals 
    such as Java class names and property names. In addition to that as test scenarios get more complex the test cases grow in size. So we need a
    more effective and comfortable way of writing tests. Therefore Citrus provides a custom XML schema definition for writing test cases
    which is much more adequate for our testing purpose.</para>
    
    <para>The custom XML schema aims to reach the convenience of domain specific languages (DSL). Let us have a look 
    at the Citrus test describing XML language by introducing a first very simple test case definition:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;spring:beans
    xmlns=&quot;http://www.citrusframework.org/schema/testcase&quot;
    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;
    xmlns:spring=&quot;http://www.springframework.org/schema/beans&quot;
    xsi:schemaLocation=&quot;
    http://www.springframework.org/schema/beans 
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.citrusframework.org/schema/testcase 
    http://www.citrusframework.org/schema/testcase/citrus-testcase.xsd&quot;&gt;
    
    &lt;testcase name=&quot;MyFirstTest&quot;&gt;
        &lt;description&gt;
            First example showing the basic test case definition elements!
        &lt;/description&gt;
        &lt;variables&gt;
            &lt;variable name=&quot;text&quot; value=&quot;Hello Test Framework&quot;/&gt;
        &lt;/variables&gt;
        &lt;actions&gt;
            &lt;echo&gt;
                &lt;message&gt;${text}&lt;/message&gt;
            &lt;/echo&gt;
        &lt;/actions&gt;
    &lt;/testcase&gt;
&lt;/spring:beans&gt;</programlisting>
    
    <para>We do need the <literal>&lt;spring:beans&gt;</literal> root element as the XML file is read by the Spring IoC container. 
    Inside this root element the Citrus specific namespace definitions take place.</para>
    
    <para>The test case itself gets a mandatory name that must be unique throughout all test cases in a project. You will receive errors
    when using duplicate test names. The test name has to follow the common Java naming conventions and rules for Java classes. This means 
    names must not contain any whitespace characters but characters like '-', '.', '_' are supported. For example, <literal>TestFeature_1</literal> 
    is valid but <literal>TestFeature 1</literal> is not.</para>
    
    <para>Before we go into more details on the attributes and actions that take place within a test case we just have a look at the Java capabilities.
    Citrus works with Java and uses the well known JUnit and TestNG framework benefits that you may be used to as a tester. Therefore each Citrus test
    comes with a Java class. When you use the XML test syntax mentioned above you may not change the Java class at all. You do not need to write Java code.</para>
    
    <para>On the other hand many users may prefer to write Java code instead of the verbose XML syntax. Therefore you have another possibility for writing Citrus tests in
    pure Java. Let us have a look at a first Java test example:</para>
    
    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">import org.testng.annotations.Test;
import com.consol.citrus.annotations.CitrusTest;
import com.consol.citrus.dsl.TestNGCitrusTestBuilder;

@Test
public class MyFirstTest extends TestNGCitrusTestBuilder {
    @CitrusTest(name = "MyFirstTest")
    public void myFirstTest() {
        description("First example showing the basic test case definition elements!");
    
        variable("text", "Hello Test Framework");
    
        echo("${text}");
    }
}</programlisting>
    
    <para>Citrus provides a base builder Java class that provides all capabilities for you in form of builder pattern methods. Just use the @CitrusTest annotation on top of the test method.
    Citrus will use the method name as the test name by default. As you can see in the example above you can also customize the test name within the @CitrusTest annotation. The test method
    builds all test actions using the test builder pattern. The defined test actions will then be called later on during test runtime.</para>
    
    <para>This is the basic test Java class pattern used in Citrus. You as a tester with development background can easily extend this pattern for customized logic. Again if you are
    coming without coding experience do not worry this Java code is optional. You can do exactly the same with the XML syntax only.</para>
    
    <note>
        <para>Please choose whatever code language type you want (Java, XML, Spring bean syntax) in order to write Citrus test cases. Developers may choose Java, testers without coding 
        experience may run best with the XML syntax. We are constantly working on even more test writing language support such as Groovy, Scala, Xtext, and so on. In general you can mix
        the different language types just as you like within your Citrus project which gives you the best of flexibility.</para>
    </note>
    
    <para>Now let us continue with the basic test case attributes and properties that you will come across while writing new tests. A typical test case defines these basic attributes
    that we are going to discuss in detail in the next sections.</para>
    
    <section id="testcase-description">
        <title>Description</title>
        
        <para>In the first examples you may have noticed that a tester can give a detailed test description. The test case description clarifies the testing purpose and perspectives. The
        description should give a short introduction to the intended use case scenario that will be tested. The user should get a first impression what the test case is all about as well 
        as special information to understand the test scenario. You can use free text in your test description no limit to the number of characters. But be aware of the XML validation rules 
        of well formed XML when using the XML test syntax (e.g. special character escaping, use of CDATA sections may be required)</para>
    </section>
    
    <section id="testcase-variables">
        <title>Variables</title>
        
        <para><emphasis>XML DSL</emphasis></para>
        <programlisting>&lt;variables&gt;
    &lt;variable name=&quot;text&quot; value=&quot;Hello Test Framework&quot;/&gt;
    &lt;variable name=&quot;customerId&quot; value=&quot;123456789&quot;/&gt;
&lt;/variables&gt;</programlisting>

        <para><emphasis>Java DSL</emphasis></para>
        <programlisting>variable(&quot;text&quot;, &quot;Hello Test Framework&quot;);
variable(&quot;customerId&quot;, &quot;123456789&quot;);</programlisting>
        
        <para>The concept of test variables is essential when writing complex tests with lots of identifiers and semantical data. Test 
        variables are valid for the whole test case. You can reference them several times using a common variable expression <literal>"${variable-name}"</literal>. 
        It is good practice to provide all important entities as test variables. This makes the test easier to maintain and more flexible. 
        All essential entities and identifiers are present right at the beginning of the test, which may also give the opportunity to easily 
        create test variants by simply changing the variable values for other test scenarios.</para>
        
        <para>The name of the variable is arbitrary. Feel free to specify any name you can think of. Of course you need to be careful with
        special characters and reserved XML entities like '&amp;', '&lt;', '&gt;'. If you are familiar with Java or any other programming 
        language simply think of the naming rules there and you will be fine with working on Citrus variables, too. The value of a variable 
        can be any character sequence. But again be aware of special XML characters like "&lt;" that need to be escaped ("&amp;lt;") when 
        used in variable values.</para>
        
        <para>The advantage of variables is obvious. Once declared the variables can be referenced many times in
        the test. This makes it very easy to vary different test cases by adjusting the variables for different means (e.g. use different 
        error codes in test cases).</para>
        
        <para>You can also use a script to create variable values. This is extremely handy when you have very complex variable values.
        Just code a small Groovy script for instance in order to define the variable value. A small sample should give you the idea how that
        works:</para>
        
        <programlisting>&lt;variables&gt;
    &lt;variable name=&quot;avg&quot;&gt;
        &lt;value&gt;
            &lt;script type=&quot;groovy&quot;&gt;
                &lt;![CDATA[
                    a = 4
                    b = 6
                    return (a + b) / 2
                ]]&gt;
            &lt;/script&gt;
        &lt;/value&gt;
    &lt;/variable&gt;
    &lt;variable name=&quot;sum&quot;&gt;
        &lt;value&gt;
            &lt;script type=&quot;groovy&quot;&gt;
                &lt;![CDATA[
                    5 + 5
                ]]&gt;
            &lt;/script&gt;
        &lt;/value&gt;
    &lt;/variable&gt;
&lt;/variables&gt;</programlisting>
        
        <para>We use the script code right inside the variable value definition. The value of the variable is the result of the last operation performed 
        within the script. For longer script code the use of <literal>&lt;![CDATA[ ]]&gt;</literal> sections is recommended.</para>
        
        <para>Citrus uses the javax ScriptEngine mechanism in order to evaluate the script code. By default Groovy is supported in any Citrus project. 
        So you can add additional ScriptEngine implementations to your project and support other script types, too.</para>
    </section>
    
    <section id="testcase-global-variables">
        <title>Global variables</title>
        
        <para>The last section told us to use variables as they are very useful and extend the maintainability of test cases. Now that every 
        test case defines local variables you can also define global variables. The global variables are valid in all tests by default.
        This is a good opportunity to declare constant values for all tests. As these variables are global we need to add those to the
        basic Spring application context file. The following example demonstrates how to add global variables in Citrus:</para>
        
        <programlisting>&lt;citrus:global-variables&gt;
    &lt;citrus:variable name=&quot;projectName&quot; value=&quot;Citrus Integration Testing&quot;/&gt;
    &lt;citrus:variable name=&quot;userName&quot; value=&quot;TestUser&quot;/&gt;
&lt;/citrus:global-variables&gt;</programlisting>
        
        <para>We add the Spring bean component to the <emphasis>'citrus-context.xml'</emphasis> application context file. The component
        receives a list of name-value variable elements. You can reference the global variables in your test cases as usual.</para>
        
        <para>Another possibility to set global variables is to load those from external property files. This may give you more powerful
        global variables with user specific properties for instance. See how to load property files as global variables in this example:</para>
        
        <programlisting>&lt;citrus:global-variables&gt;
    &lt;citrus:file path=&quot;classpath:global-variable.properties&quot;/&gt;
&lt;/citrus:global-variables&gt;</programlisting>
        
        <para>We have just added a file path reference to the global variables component. Citrus loads the property file content as global
        test variables. You can mix property file and name-value pair variable definitions in the global variables component.</para>

        <note>
          <para>The global variables can have variable expressions and Citrus functions. It is possible to use previously defined global
          variables as values of new variables, like in this example:</para>
        </note>
      
        <programlisting>user=Citrus
greeting=Hello ${user}!
date=citrus:currentDate('yyyy-MM-dd')</programlisting>
    </section>
    
    <section id="testcase-actions">
        <title>Test Actions</title>
        
        <para>Now we get close to the main part of writing an integration test. A Citrus test case defines a sequence of actions that will take 
        place during the test. Actions by default are executed sequentially in the same order as they are defined in the test case definition.</para>
        
        <para><emphasis>XML DSL</emphasis></para>
        <programlisting>&lt;actions&gt;
    &lt;action&gt;[...]&lt;/action&gt;
    &lt;action&gt;[...]&lt;/action&gt;
&lt;/actions&gt;</programlisting>

        <para>All actions have individual names and properties that define the respective behavior. Citrus offers a wide range of test actions from scratch, 
        but you are also able to write your own test actions in Java or Groovy and execute them during a test. <xref linkend="actions"/> gives you a brief 
        description of all available actions that can be part of a test case execution.</para>
        
        <para>The actions are combined in free sequence to each other so that the tester is able to declare a special action chain inside the test.
        These actions can be sending or receiving messages, delaying the test, validating the database and so on. Step-by-step the test proceeds through 
        the action chain. In case one single action fails by reason the whole test case is red and declared not successful.</para>
    </section>
    
    <section id="testcase-finally">
        <title>Finally cleanup section</title>
        
        <para>Java developers might be familiar with the concept of doing something in the finally code section. The <literal>finally</literal> section 
        contains a list of test actions that will be executed guaranteed at the very  end of the test case even if errors did occur during the execution before. 
        This is the right place to tidy up things that were previously created by the test like cleaning up the database for instance. The <literal>finally</literal> 
        section is described in more detail in <xref linkend="finally"/>. However here is the basic syntax inside a test.</para>
  
        <para><emphasis>XML DSL</emphasis></para>
        <programlisting>&lt;finally&gt;
    &lt;echo&gt;
        &lt;message&gt;Do finally - regardless of what has happened before&lt;/message&gt;
    &lt;/echo&gt;
&lt;/finally&gt;</programlisting>

        <para><emphasis>Java DSL</emphasis></para>
        <programlisting language="java">@CitrusTest
public void sampleTest() {
    echo("Hello Test Framework");
    
    doFinally(
        echo("Do finally - regardless of any error before");
    );
}</programlisting>
    </section>
  </section>
  
  <section id="testcase-metainfo">
    <title>Meta information</title>

    <para>The user can provide some additional information about the test case. The meta-info section at the very beginning of the test case 
    holds information like author, status or creation date. In detail the meta information is specified like this:</para>
    
    <para><emphasis>XML DSL</emphasis></para>
    <programlisting>&lt;testcase name=&quot;metaInfoTest&quot;&gt;
    &lt;meta-info&gt;
        &lt;author&gt;Christoph Deppisch&lt;/author&gt;
        &lt;creationdate&gt;2008-01-11&lt;/creationdate&gt;
        &lt;status&gt;FINAL&lt;/status&gt;
        &lt;last-updated-by&gt;Christoph Deppisch&lt;/last-updated-by&gt;
        &lt;last-updated-on&gt;2008-01-11T10:00:00&lt;/last-updated-on&gt;
    &lt;/meta-info&gt;
    &lt;description&gt;
        ...
    &lt;/description&gt;
    &lt;actions&gt;
        ...
    &lt;/actions&gt;
&lt;/testcase&gt;</programlisting>
    
    <para><emphasis>Java DSL</emphasis></para>
    <programlisting language="java">@CitrusTest
public void sampleTest() {
    description("This is a Test");
    author("Christoph");
    status(Status.FINAL);
    
    echo("Hello Citrus!");
}</programlisting>

    <para>The status allows following values: DRAFT, READY_FOR_REVIEW, DISABLED, FINAL.
    The meta-data information to a test is quite important to give the reader a first information about
    the test. It is also possible to generate test documentation using this meta-data information. The built-in Citrus 
    documentation generates HTML or Excel documents that list all tests with their metadata information and description.</para>
    
    <note>
        <para>Tests with the status DISABLED will not be executed during a test suite run. So someone can just start adding
        planned test cases that are not finished yet in status DRAFT. In case a test is not runnable yet because it is not finished,
        someone may disable a test temporarily to avoid causing failures during a test run. Using these different statuses one can 
        easily set up test plans and review the progress of test coverage by comparing the number of DRAFT tests to those in the FINAL state.</para>
    </note>
    
  </section>
  
</chapter>
